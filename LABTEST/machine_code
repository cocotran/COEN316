
      "00000"   "00100000000000110000000000000000"; -- addi r3, r0, 0
      "00001"   "00100000000000010000000000000000"; -- addi r1, r0, 0
      "00010"   "00100000000000100000000000000101"; -- addi r2,r0,5
LOOP: "00011"  "00000000001000100000100000100000"; -- add r1,r1,r2
      "00100"  "00100000010000101111111111111111"; -- addi r2, r2, -1
      "00101"  "00010000010000110000000000000001"; -- beq r2,r3 (+1) THERE
      "00110"  "00001000000000000000000000000011"; -- jump 3  (LOOP)
THERE:"00111"  "10101100000000010000000000000000"; -- sw r1, 0(r0)  
      "01000"  "10001100000001000000000000000000"; -- lw r4, 0(r0)
      "01001"  "00110000100001000000000000001010"; -- andi r4,r4, 0x000A
      "01010"  "00110100100001000000000000000001"; -- ori r4,r4, 0x0001
      "01011"  "00111000100001000000000000001011"; -- xori r4,r4, 0xB
     "01100"   "00111000100001000000000000000000"; -- xori r4,r4, 0x0000
      others   "00000000000000000000000000000000"; -- dont care





opcode RD, RS, RT 

Program finds the sum of 5+4+3+2+1 = 15 into R1
then stores R1 into memory address 0
then loads R4 with  memory address 0
then peforms some immediate logic instructions

      addi r3, r0, 0 ; R3 = 0 + 0 = 0

      addi r1, r0, 0 ; R1 = 0 + 0 = 0   (R1 holds the sum)

      addi r2,r0,5   ; R2 = 0 + 5 = 5 (will be decremented each loop)

LOOP: add r1,r1,r2   ;  R1 = R1 + R2 

      addi r2, r2, -1 ;  R2 = R2 - 1 

      beq r2,r3 (+1)   ; beq r2 r3 THERE
      
      jump  LOOP       ; jump to LOOP

THERE: sw r1, 0(r0)   ; store sum (=15) into address 0
                         RT = R1 = 15 = 1111

      lw r4, 0(r0)   ; load r4 with stored sum r4 should be 15
                      RT = R4 = 15 = 1111


     for the following logical instructions :
      opcode rs, rt, immediate_data

      andi r4, r4, 0x000A  ; r4 = 1111
                                  1010 and
                                 -----
                                  1010

     ori r4, r4, 0x0001    ; r4 = 1010
                                  0001  or
                                  ----
                                  1011

     xori r4, r4 , 0xB      ; r4 = 1011
                                   1011  xor
                                   ----
                                   0000

     xori r4, r4, 0x0        ; r4 = 0000
                                    0000 xor
                                    ----


